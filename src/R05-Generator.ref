*$FROM LibraryEx
$EXTERN SaveFile, MapAccum, Map, Inc;

*$FROM R5FW-Plainer
$EXTERN InlineExpr;

*$FROM R5FW-Transformer
$EXTERN Transform;


/**
  <R05-Generate-ToFile (e.OutputFile) e.Tree> == пусто
*/
$ENTRY R05-Generate-ToFile {
  (e.OutputFile) e.Tree =
    <SaveFile (e.OutputFile) <R05-Generate-ToLines e.Tree>>;
}

/**
  <R05-Generate-ToLines e.Tree> == (s.CHAR*)*
*/
$ENTRY R05-Generate-ToLines {
  e.Tree =
    <R05-Generate-Aux
      <MapAccum generator_GenTreeItem (/* declarations */) <Transform e.Tree>>
    >;
}

R05-Generate-Aux {
  (e.Declarations) e.Definitions =
    ('/* Automatically generated file. Don\'t edit! */')
    ('#include "refal05rts.h"')
    ()
    ()
    e.Declarations
    ()
    e.Definitions
    ()
    ('/* End of file */')
}

$ENTRY generator_GenTreeItem {
  (e.Declarations) (Extern e.Names) =
    (e.Declarations <Map r05-generator_GenExtern e.Names>)
    /* пусто */;

  (e.Declarations) (Function t.SrcPos (e.Name) s.ScopeClass /* пусто */)
    = (e.Declarations <GenEmptyDefinition e.Name s.ScopeClass>)
      <AssertEq Local s.ScopeClass>
      /* пусто */;

  (e.Declarations) (Function t.SrcPos (e.Name) s.ScopeClass e.Body) =
    (e.Declarations <GenDeclaration s.ScopeClass e.Name>)
    <GenFunction s.ScopeClass (e.Name) e.Body>;

  (e.Declarations) (SpecialComment t.SrcPos e.Text) =
    (e.Declarations)
    ('/*')
    (<SafeSpecialComment e.Text>)
    ('*/');
}

SafeSpecialComment {
  '!' e.Comment = '!!' <SafeSpecialComment e.Comment>;
  '/*' e.Comment = '/!*' <SafeSpecialComment e.Comment>;
  '*/' e.Comment = '*!/' <SafeSpecialComment e.Comment>;
  s.Other e.Comment = s.Other <SafeSpecialComment e.Comment>;
  /* пусто */ = /* пусто */;
}

$ENTRY r05-generator_GenExtern {
  (t.SrcPos e.Name) = <GenDeclaration Entry e.Name>;
}


Scope {
  Entry = 'ENTRY'; Local = 'LOCAL';
}

GenEmptyDefinition {
  /* поддержка пустого составного символа "" */
  /* пусто */ s.ScopeClass
    = ('static struct r05_function r05f_ = { r05_enum_function_code, "" };');

  e.Name s.ScopeClass
    = ('R05_DEFINE_' <Scope s.ScopeClass> '_ENUM(' <DefName e.Name> ')');
}

GenDeclaration {
  /* поддержка пустого составного символа "" */
  s.ScopeClass /* пусто */
    = <AssertEq Entry s.ScopeClass>
      ('extern struct r05_function r05f_;');

  s.ScopeClass e.Name =
    ('R05_DECLARE_' <Scope s.ScopeClass> '_FUNCTION(' <EscapeName e.Name> ')');
}

GenFunction {
  s.ScopeClass (e.Name) e.Sentences =
    ('R05_DEFINE_' <Scope s.ScopeClass> '_FUNCTION(' <DefName e.Name> ') {')
    ('  r05_this_is_generated_function();')
    <Map generator_GenSentence <AddFailCommand e.Sentences>>
    ('}')
    ();
}

AssertEq { s.X s.X = }


DefName {
  e.Name = <EscapeName e.Name> ', "' <EscapeString e.Name> '"';
}

/*
  Разрешим знак $ для функций Stop$$ и Imp$$ на всякий случай.
  Декорирование было выбрано именно таким, чтобы избежать двух прочерков
  подряд в декорированном имени.
*/
EscapeName {
  e.Name = <EscapeName-GlueCodes <Map r05-generator_EscapeNameChar e.Name>>;
}

$ENTRY r05-generator_EscapeNameChar {
  '_' = (e 'u_');
  '-' = (e 'm-');
  '$' = (e 'd$');

  s.Other
    , <Type s.Other>
    : {
        'L' s.st_ s.Letter = (c s.Letter);
        'D' s.st_ s.Digit = (c s.Digit);

        s.t_ s.st_ s.Encoded = (k <EscapeNameChar-Code s.Encoded>);
      };
}

EscapeNameChar-Code {
  s.Char, <Ord s.Char> : s.Code = <Hex </ s.Code 16>> <Hex <% s.Code 16>>;
}

EscapeName-GlueCodes {
  (k e.Code1) (k e.Code2) e.Name
    = <EscapeName-GlueCodes (k e.Code1 e.Code2) e.Name>;

  (k e.Code1) (c s.Char) (k e.Code2) e.Name
    = <EscapeName-GlueCodes
        (k e.Code1 <EscapeNameChar-Code s.Char> e.Code2) e.Name
      >;

  (k e.Code1) (e s.Escape_ s.Char) (k e.Code2) e.Name
    = <EscapeName-GlueCodes
        (k e.Code1 <EscapeNameChar-Code s.Char> e.Code2) e.Name
      >;

  (k e.Code) e.Name = 'k' e.Code '_' <EscapeName-GlueCodes e.Name>;
  (e s.Escape s.Char_) e.Name = s.Escape '_' <EscapeName-GlueCodes e.Name>;
  (c s.Char) e.Name = s.Char <EscapeName-GlueCodes e.Name>;
  /* пусто */ = /* пусто */;
}

Hex {
  10 = 'A'; 11 = 'B'; 12 = 'C'; 13 = 'D'; 14 = 'E'; 15 = 'F';

  s.Dec = <Symb s.Dec>;
}

AddFailCommand {
  /*
    если последнее предложение имеет вид
    e.X = ...;, в конце не генерится вызов
    r05_recognition_impossible()
  */
  e.Sentences (((Variable t.SrcPos 'e' e.Index)) RETURN (e.Result)) =
    e.Sentences (((Variable t.SrcPos 'e' e.Index)) RETURN (e.Result));

  e.Sentences = e.Sentences ReturnRecognitionImpossible;
}

$ENTRY generator_GenSentence {
  ((e.Pattern) RETURN (e.Result)) =
    ()
    ('  do {')
    <SkipIndentAccum
      <MapAccum
        generator_GenCommand
        ('    ' /* отступ */)
        <CompileSentence (e.Pattern) (e.Result)>
      >
    >
    ('  } while (0);');

  ReturnRecognitionImpossible =
    ()
    ('  r05_recognition_impossible();');
}

SkipIndentAccum {
  /* отступ должен остаться тем же */
  ('    ') e.Generated = e.Generated;
}

SafeComment {
  e.Comment-B '/*' e.Comment-E =
    <SafeComment e.Comment-B '/\' \'*' e.Comment-E>;

  e.Comment-B '*/' e.Comment-E =
    <SafeComment e.Comment-B '*\' \'/' e.Comment-E>;

  e.Comment = e.Comment;
}

$ENTRY generator_GenCommand {
  (e.Indent) (CmdOpenedE-Start s.L s.R 'e' e.Index)
    = (e.Indent '  ') <CmdOpenedE-Start (e.Indent) s.L s.R 'e' e.Index>;

  (e.Indent '  ') (CmdOpenedE-End s.L s.R 'e' e.Index)
    = (e.Indent) <CmdOpenedE-End (e.Indent) s.L s.R 'e' e.Index>;

  (e.Indent) (s.Command e.Args) = (e.Indent) <Mu s.Command (e.Indent) e.Args>;
}

CmdComment {
  (e.Indent) e.Text = (e.Indent '/* ' <SafeComment e.Text> ' */');
}

CmdAllocStack {
  (e.Indent) 0 = /* пусто */;

  (e.Indent) s.Size
    = (e.Indent 'struct r05_node *p[' <Symb s.Size> '] = { 0 };');
}

CmdInitHole0 {
  (e.Indent)
    = (e.Indent <Elem 0> ' = arg_begin->next;')
      (e.Indent <Elem 1> ' = arg_end;');
}

CmdMatch {
  (e.Indent) s.Dir s.L s.R s.Stack s.Type e.Value
    , 'r05_' <MatchFunc s.Type e.Value> '_' <StrFromDir s.Dir> : e.Func
    , <ElemPtr s.Stack> ', ' <ElemLR s.L s.R> <MatchArgs s.Type e.Value>
    : e.Args
    = (e.Indent 'if (! ' e.Func '(' e.Args '))')
      (e.Indent '  continue;');
}

MatchFunc {
  Symbol s.Type e.Value = <SymbolFunc s.Type>;
  Brackets = 'brackets';
  Repeated s.Mode s.SampleOffset = 'repeated_' s.Mode 'var';
  Variable 's' = 'svar';
  Variable 't' = 'tvar';
}

SymbolFunc {
  Char = 'char';
  Number = 'number';
  Word = 'function';
}

StrFromDir {
  LEFT = 'left'; RIGHT = 'right';
}

MatchArgs {
  Symbol s.Type e.Value = ', ' <SymbolTextRep s.Type e.Value>;
  Brackets = /* пусто */;
  Repeated s.Mode s.SampleOffset = ', ' <ElemPtr s.SampleOffset>;
  Variable s.Mode = /* пусто */;
}

SymbolTextRep {
  Char s.Char = '\'' <r05-generator_EscapeChar s.Char> '\'';
  Number s.Number = <Symb s.Number> 'UL';
  Word e.Name = '&r05f_' <EscapeName e.Name>;
}

CmdEmpty {
  (e.Indent) s.L s.R
    = (e.Indent 'if (! r05_empty_hole(' <ElemLR s.L s.R> '))')
      (e.Indent '  continue;');
}

CmdClosedE {
  (e.Indent) s.L s.R 'e' s.Offset
    = (e.Indent
        'r05_close_evar(' <ElemPtr s.Offset> ', ' <ElemLR s.L s.R> ');'
      );
}

CmdOpenedE-Start {
  (e.Indent) s.L s.R 'e' s.Offset
    = (e.Indent <Elem s.Offset> ' = ' <Elem s.L> '->next;')
      (e.Indent <Elem <Inc s.Offset>> ' = ' <Elem s.L> ';')
      (e.Indent 'r05_start_e_loop();')
      (e.Indent 'do {');
}

CmdOpenedE-End {
  (e.Indent) s.L s.R 'e' s.Offset
    = (e.Indent
        '} while (r05_open_evar_advance('
        <ElemPtr s.Offset> ', ' <Elem s.R>
        '));'
      )
      (e.Indent 'r05_stop_e_loop();');
}

CmdEmptyResult {
  (e.Indent) = () (e.Indent 'r05_reset_allocator();');
}

CmdAllocateElem {
  (e.Indent) s.ElementType e.Info =
    (e.Indent 'r05_alloc_' <Mu s.ElementType e.Info>);
}

ElSymbol {
  s.Type e.Value = <SymbolFunc s.Type> '(' <SymbolTextRep s.Type e.Value> ');';
}

ElString {
  s.Len e.String = 'chars("' <EscapeString e.String> '", ' <Symb s.Len> ');';
}

ElOpenBracket { s.Pos = 'open_bracket(' <ElemPtr s.Pos> ');' }
ElCloseBracket { s.Pos = 'close_bracket(' <ElemPtr s.Pos> ');' }
ElOpenCall { s.Pos = 'open_call(' <ElemPtr s.Pos> ');' }
ElCloseCall { s.Pos = 'close_call(' <ElemPtr s.Pos> ');' }

ElSavePos { s.Pos = 'insert_pos(' <ElemPtr s.Pos> ');' }

ElVariable { s.Mode s.Offset = s.Mode 'var(' <ElemPtr s.Offset> ');' }

CmdLinkBrackets {
  (e.Indent) s.Left s.Right =
    (e.Indent 'r05_link_brackets(' <Elem s.Left> ', ' <Elem s.Right> ');');
}

CmdPushStack {
  (e.Indent) s.ElemNumber =
    (e.Indent 'r05_push_stack(' <Elem s.ElemNumber> ');');
}

CmdCorrectVar {
  (e.Indent) 'e' s.Offset
    = (e.Indent 'r05_correct_evar(' <ElemPtr s.Offset> ');');

  (e.Indent) s.Mode s.Offset = /* для остальных переменных ничего не делаем */;
}

CmdInsertVar {
  (e.Indent) s.Pos s.Mode s.Offset
    = (e.Indent
        'r05_splice_' s.Mode 'var(' <Elem s.Pos> ', ' <ElemPtr s.Offset> ');'
      );
}

CmdReturnResult {
  (e.Indent) =
    (e.Indent 'r05_splice_from_freelist(arg_begin);')
    (e.Indent 'r05_splice_to_freelist(arg_begin, arg_end);')
    (e.Indent 'return;');
}

EscapeString {
  e.String = <Map r05-generator_EscapeChar e.String>;
}

$ENTRY r05-generator_EscapeChar {
  '\n' = '\\n';
  '\t' = '\\t';
  '\r' = '\\r';
  '\'' = '\\\'';
  '\"' = '\\\"';
  '\\' = '\\\\';

  s.Other = <EscapeChar-Aux s.Other <Ord s.Other>>;
}

EscapeChar-Aux {
  s.Other s.Code =
    <EscapeChar-SwCompare
      s.Other <Compare 31 s.Code> <Compare s.Code 128> s.Code
    >;
}

EscapeChar-SwCompare {
  s.Other '-' '-' s.Code = s.Other;

  s.Other s.Compare1 s.Compare2 s.Code =
    '\\'
    <Symb <Div s.Code 64>>
    <Symb <Mod <Div s.Code 8> 8>>
    <Symb <Mod s.Code 8>>;
}

Elem { s.Number = 'p[' <Symb s.Number> ']' }
ElemPtr { s.Number = 'p+' <Symb s.Number> }
ElemLR { s.L s.R = <Elem s.L> ', ' <Elem s.R> }


*===============================================================================
* Генерация абстрактного кода для предложения
*===============================================================================

CompileSentence {
  (e.Pattern) (e.Result)
    , <GenPattern e.Pattern> : s.PatStack (e.PatternVars) (e.PatternCommands)
    , <GenResult s.PatStack (e.PatternVars) e.Result> : s.Stack e.ResultCommands
    = <CompileSentence-OpenELoops
        <Map generator_MakeDeclaration e.PatternVars>
        (CmdAllocStack s.Stack)
        (CmdComment <InlineExpr e.Pattern>)
        e.PatternCommands
        (CmdEmptyResult)
        e.ResultCommands
        (CmdReturnResult)
      >;
}

$ENTRY generator_MakeDeclaration {
  (s.Mode e.Index s.Sample (s.Inst e.Insts))
    = (CmdComment
        s.Mode '.' e.Index ': '
        <Symb s.Inst> <Map r05-generator-SymbInst e.Insts>
      );
}

$ENTRY r05-generator-SymbInst { s.Inst = ', ' <Symb s.Inst> }

CompileSentence-OpenELoops {
  e.Commands-B (CmdOpenedE s.L s.R 'e' s.Stack) e.Commands-E
    = e.Commands-B
      (CmdOpenedE-Start s.L s.R 'e' s.Stack)
      <CompileSentence-OpenELoops e.Commands-E>
      (CmdOpenedE-End s.L s.R 'e' s.Stack);

  e.Commands = e.Commands;
}

/*
  e.Vars ::= (s.Mode e.Index s.SampleOffset (e.Instances))*
  e.Instances ::= s.Offset+
*/

*===============================================================================
* Генерация образца
*===============================================================================

/*
Команды распознавания
  Символы, скобки, повторные переменные и s-, t-переменные:
    (CmdMatch s.Direction s.L s.R s.ElemPtr s.MatchType e.MatchValue)

    s.Direction ::= LEFT | RIGHT

    s.MatchType e.MatchValue ::=
        Symbol Char s.Char
      | Symbol Number s.Number
      | Symbol Word e.Name
      | Brackets
      | Repeated s.Mode s.Sample
      | Variable s.Mode

  Пустые скобки:
    (CmdEmpty s.L s.R),

  Открытые e-переменные до обработки:
    (CmdOpenedE s.L s.R 'e' s.Offset)

  Открытые e-переменные после обработки:
    (CmdOpenedE-Start s.L s.R 'e' s.Offset)
    (CmdOpenedE-End s.L s.R 'e' s.Offset)

  Закрытые e-переменные:
    (CmdClosedE s.L s.R 'e' s.Offset)

  Комментарий, вносимый в исходный код:
    (CmdComment e.Text)
*/

GenPattern {
  e.Pattern = <DoGenPattern 2 (0 e.Pattern 1) (/* vars */) ((CmdInitHole0))>;
}

Inc2 { s.N = <+ s.N 2> }

VarSize {
  's' = 1; 't' = 2; 'e' = 2;
}

IncMode { s.N s.Mode = <+ s.N <VarSize s.Mode>> }

VarRightSide {
  s.N 's' = s.N;
  s.N s.TE = <Inc s.N>;
}

DoGenPattern {
  /* Распознавание литералов (символьных, целочисленных, имён) */
  s.Stack e.Holes-B (s.L (Symbol s.Type e.Value) e.Hole s.R) e.Holes-E (e.Vars)
  (e.Commands)
    = <DoGenPattern
        <Inc s.Stack> e.Holes-B (s.Stack e.Hole s.R) e.Holes-E (e.Vars)
        (e.Commands (CmdMatch LEFT s.L s.R s.Stack Symbol s.Type e.Value))
      >;

  s.Stack e.Holes-B (s.L e.Hole (Symbol s.Type e.Value) s.R) e.Holes-E (e.Vars)
  (e.Commands)
    = <DoGenPattern
        <Inc s.Stack> e.Holes-B (s.L e.Hole s.Stack) e.Holes-E (e.Vars)
        (e.Commands (CmdMatch RIGHT s.L s.R s.Stack Symbol s.Type e.Value))
      >;

  /* Распознавание скобок */
  s.Stack e.Holes-B (s.L (Brackets e.SubHole) e.Hole s.R) e.Holes-E (e.Vars)
  (e.Commands)
    , s.Stack : s.LB
    , <Inc s.Stack> : s.RB
    = <DoGenPattern
        <Inc2 s.Stack>
        e.Holes-B (s.LB e.SubHole s.RB) (s.RB e.Hole s.R) e.Holes-E
        (e.Vars)
        (e.Commands (CmdMatch LEFT s.L s.R s.LB Brackets))
      >;

  s.Stack e.Holes-B (s.L e.Hole (Brackets e.SubHole) s.R) e.Holes-E (e.Vars)
  (e.Commands)
    , s.Stack : s.LB
    , <Inc s.Stack> : s.RB
    = <DoGenPattern
        <Inc2 s.Stack>
        e.Holes-B (s.L e.Hole s.LB) (s.LB e.SubHole s.RB) e.Holes-E
        (e.Vars)
        (e.Commands (CmdMatch RIGHT s.L s.R s.LB Brackets))
      >;

  /* Пустой диапазон */
  s.Stack e.Holes-B (s.L /* пусто */ s.R) e.Holes-E (e.Vars) (e.Commands)
    = <DoGenPattern
        s.Stack e.Holes-B e.Holes-E (e.Vars) (e.Commands (CmdEmpty s.L s.R))
      >;

  /* Распознавание переменных */
  s.Stack
  e.Holes-B (s.L (Variable t.SrcPos s.Mode e.Index) e.Hole s.R) e.Holes-E
  (e.Vars-B (s.Mode e.Index s.Sample (e.Insts)) e.Vars-E) (e.Commands)
    , <VarRightSide s.Stack s.Mode> : s.VarRight
    = <DoGenPattern
        <IncMode s.Stack s.Mode> e.Holes-B (s.VarRight e.Hole s.R) e.Holes-E
        (e.Vars-B (s.Mode e.Index s.Sample (e.Insts s.Stack)) e.Vars-E)
        (e.Commands (CmdMatch LEFT s.L s.R s.Stack Repeated s.Mode s.Sample))
      >;

  s.Stack
  e.Holes-B (s.L e.Hole (Variable t.SrcPos s.Mode e.Index) s.R) e.Holes-E
  (e.Vars-B (s.Mode e.Index s.Sample (e.Insts)) e.Vars-E) (e.Commands)
    , <VarRightSide s.Stack s.Mode> : s.VarRight
    = <DoGenPattern
        <IncMode s.Stack s.Mode> e.Holes-B (s.L e.Hole s.Stack) e.Holes-E
        (e.Vars-B (s.Mode e.Index s.Sample (e.Insts s.Stack)) e.Vars-E)
        (e.Commands (CmdMatch RIGHT s.L s.R s.Stack Repeated s.Mode s.Sample))
      >;

  /* Диапазон с закрытой переменной */
  s.Stack e.Holes-B (s.L (Variable t.SrcPos 'e' e.Index) s.R) e.Holes-E
  (e.Vars) (e.Commands)
    = <DoGenPattern
        <IncMode s.Stack 'e'> e.Holes-B e.Holes-E
        (e.Vars ('e' e.Index s.Stack (s.Stack)))
        (e.Commands (CmdClosedE s.L s.R 'e' s.Stack))
      >;

  s.Stack e.Holes-B (s.L (Variable t.SrcPos 's' e.Index) e.Hole s.R) e.Holes-E
  (e.Vars) (e.Commands)
    , <VarRightSide s.Stack 's'> : s.VarRight
    = <DoGenPattern
        <IncMode s.Stack 's'> e.Holes-B (s.VarRight e.Hole s.R) e.Holes-E
        (e.Vars ('s' e.Index s.Stack (s.Stack)))
        (e.Commands (CmdMatch LEFT s.L s.R s.Stack Variable 's'))
      >;

  s.Stack e.Holes-B (s.L (Variable t.SrcPos 't' e.Index) e.Hole s.R) e.Holes-E
  (e.Vars) (e.Commands)
    , <VarRightSide s.Stack 't'> : s.VarRight
    = <DoGenPattern
        <IncMode s.Stack 't'> e.Holes-B (s.VarRight e.Hole s.R) e.Holes-E
        (e.Vars ('t' e.Index s.Stack (s.Stack)))
        (e.Commands (CmdMatch LEFT s.L s.R s.Stack Variable 't'))
      >;

  s.Stack e.Holes-B (s.L e.Hole (Variable t.SrcPos 's' e.Index) s.R) e.Holes-E
  (e.Vars) (e.Commands)
    = <DoGenPattern
        <IncMode s.Stack 's'> e.Holes-B (s.L e.Hole s.Stack) e.Holes-E
        (e.Vars ('s' e.Index s.Stack (s.Stack)))
        (e.Commands (CmdMatch RIGHT s.L s.R s.Stack Variable 's'))
      >;

  s.Stack e.Holes-B (s.L e.Hole (Variable t.SrcPos 't' e.Index) s.R) e.Holes-E
  (e.Vars) (e.Commands)
    = <DoGenPattern
        <IncMode s.Stack 't'> e.Holes-B (s.L e.Hole s.Stack) e.Holes-E
        (e.Vars ('t' e.Index s.Stack (s.Stack)))
        (e.Commands (CmdMatch RIGHT s.L s.R s.Stack Variable 't'))
      >;

  s.Stack e.Holes-B (s.L (Variable t.SrcPos 'e' e.Index) e.Hole s.R) e.Holes-E
  (e.Vars) (e.Commands)
    , <VarRightSide s.Stack 'e'> : s.VarRight
    = <DoGenPattern
        <IncMode s.Stack 'e'> e.Holes-B (s.VarRight e.Hole s.R) e.Holes-E
        (e.Vars ('e' e.Index s.Stack (s.Stack)))
        (e.Commands (CmdOpenedE s.L s.R 'e' s.Stack))
      >;

  /* Завершение разбора. */
  s.Stack /* пусто */ (e.Vars) (e.Commands) =
    s.Stack (e.Vars) (e.Commands);
}

*===============================================================================
* Генерация результата
*===============================================================================

GenResult {
  s.Stack (e.PatternVars) e.Result =
    <DoGenResult
      (e.PatternVars)
      (/* alloc commands */) (/* other commands */)
      s.Stack
      e.Result
    >;
}

* Основные команды работы с образцом
*  (CmdAllocateElem s.Number s.ElType e.Info)
*  (CmdLinkBrackets s.Left s.Right)
*  (CmdPushStack s.Number)
*  (CmdCorrectVar s.Usings s.Mode e.Index)
*  (CmdInsertVar s.Pos s.Usings s.Mode e.Index)


/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

DoGenResult {
  /* Оптимизация для распределения последовательности char’ов */
  (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
  (Symbol Char s.Char1) (Symbol Char s.Char2) e.Result =
    <DoGenResult
      (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
      (TkString 2 s.Char1 s.Char2) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Stack (Symbol Char s.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElSymbol Char s.Value))
      (e.Commands)
      s.Stack e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
  (TkString s.Len e.String) (Symbol Char s.Char) e.Result =
    <DoGenResult
      (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
      (TkString <Inc s.Len> e.String s.Char) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
  (TkString s.Len e.String) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElString s.Len e.String))
      (e.Commands)
      s.Stack e.Result
    >;

  /* Создаём литералы */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Stack (Symbol s.Type e.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElSymbol s.Type e.Value))
      (e.Commands)
      s.Stack e.Result
    >;

  /*
    Обработка открывающих скобок всех типов осуществляется похоже.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Stack (Brackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElOpenBracket s.Stack))
      (e.Commands)
      <Inc s.Stack> e.InBrackets (TkCloseBracket s.Stack) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Stack (Call t.SrcPos (e.Name) e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElOpenCall s.Stack))
      (e.Commands)
      <Inc s.Stack> (Symbol Word e.Name)
      e.InBrackets (TkCloseCall s.Stack) e.Result
    >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД — слинковать, угловые — добавить в стек.
  */
  (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
  (TkCloseBracket s.OpenPos) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElCloseBracket s.Stack))
      (
        (CmdLinkBrackets s.OpenPos s.Stack)
        e.Commands
      )
      <Inc s.Stack> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Stack
  (TkCloseCall s.OpenPos) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem ElCloseCall s.Stack))
      (
        (CmdPushStack s.Stack)
        (CmdPushStack s.OpenPos)
        e.Commands
      )
      <Inc s.Stack> e.Result
    >;

  /* Оптимизация: частный случай для s-переменных, их проще всегда копировать */
  (e.Vars-B ('s' e.Index s.Sample (e.Insts)) e.Vars-E)
  (e.AllocCommands) (e.Commands)
  s.Stack (Variable t.SrcPos 's' e.Index) e.Result
    = <DoGenResult
        (e.Vars-B ('s' e.Index s.Sample (e.Insts)) e.Vars-E)
        (e.AllocCommands (CmdAllocateElem ElVariable 's' s.Sample))
        (e.Commands)
        s.Stack e.Result
      >;

  /* Переменная есть в образце — переносим, позиция подготовлена */
  (e.Vars-B (s.Mode e.Index s.Sample (s.Inst e.Insts)) e.Vars-E)
  (e.AllocCommands (CmdAllocateElem ElSavePos s.InsertPos)) (e.Commands)
  s.Stack (Variable t.SrcPos s.Mode e.Index) e.Result
    = <DoGenResult
        (e.Vars-B (s.Mode e.Index s.Sample (e.Insts)) e.Vars-E)
        (e.AllocCommands (CmdAllocateElem ElSavePos s.InsertPos))
        /*
          Коррекцию всех переменных нужно осуществлять до переносов
          этих переменных. Переносы переменных выполняются в обратном
          порядке, т.к. операция переноса вставляет значение перед
          позицией вставки.
        */
        (
          (CmdCorrectVar s.Mode s.Inst)
          e.Commands
          (CmdInsertVar s.InsertPos s.Mode s.Inst)
        )
        s.Stack e.Result
      >;

  /* Переменная есть в образце — переносим, позиция не подготовлена */
  (e.Vars-B (s.Mode e.Index s.Sample (s.Inst e.Insts)) e.Vars-E)
  (e.AllocCommands) (e.Commands)
  s.Stack (Variable t.SrcPos s.Mode e.Index) e.Result
    = <DoGenResult
        (e.Vars-B (s.Mode e.Index s.Sample (e.Insts)) e.Vars-E)
        (e.AllocCommands (CmdAllocateElem ElSavePos s.Stack))
        /*
          Коррекцию всех переменных нужно осуществлять до переносов
          этих переменных. Переносы переменных выполняются в обратном
          порядке, т.к. операция переноса вставляет значение перед
          позицией вставки.
        */
        (
          (CmdCorrectVar s.Mode s.Inst)
          e.Commands
          (CmdInsertVar s.Stack s.Mode s.Inst)
        )
        <Inc s.Stack> e.Result
      >;

  /* Переменной нет в образце — копируем */
  (e.Vars-B (s.Mode e.Index s.Sample ()) e.Vars-E)
  (e.AllocCommands) (e.Commands)
  s.Stack (Variable t.SrcPos s.Mode e.Index) e.Result
    = <DoGenResult
        (e.Vars-B (s.Mode e.Index s.Sample ()) e.Vars-E)
        (e.AllocCommands (CmdAllocateElem ElVariable s.Mode s.Sample))
        (e.Commands)
        s.Stack e.Result
      >;

  /* Завершение просмотра */
  (e.UnusedVars) (e.AllocCommands) (e.Commands) s.Stack
    = s.Stack e.AllocCommands e.Commands;
}
