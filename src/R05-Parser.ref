*$FROM LibraryEx
$EXTERN MapAccum, Map, Unique;

*$FROM R5FW-Parser
$EXTERN Parse, Scan;


/**
  <R05-PrepareAST e.AST>
    == Success e.R05-AST
    == Fails e.Errors
*/
$ENTRY R05-PrepareAST {
  e.AST = <CheckAST <EL-Create> e.AST>;
}

CheckAST {
  t.ErrorList e.AST
    = <CheckAST-ExternsArePlained t.ErrorList <PlainExterns e.AST>>;
}

CheckAST-ExternsArePlained {
  t.ErrorList e.AST
    = <CheckAST-UnusedsAreFound
        <FindUnused t.ErrorList e.AST>
      >;
}

CheckAST-UnusedsAreFound {
  t.ErrorList e.AST
    , <EL-Destroy t.ErrorList>
    : {
        /* нет ошибок */ = Success <CastAST e.AST>;
        e.Errors = Fails e.Errors;
      };
}


PlainExterns {
  e.AST = <Map r05-parser_PlainExterns e.AST>;
}

$ENTRY r05-parser_PlainExterns {
  (Extern e.Names) = <Map r05-parser_PlainExterns-Name e.Names>;

  (Function t.Pos (e.Name) s.Scope e.Body)
    = (Function t.Pos (e.Name) s.Scope e.Body);

  (SpecialComment t.Pos e.Text) = (SpecialComment t.Pos e.Text);
}

$ENTRY r05-parser_PlainExterns-Name {
  (t.Pos e.Name) = (Function t.Pos (e.Name) Extern /* пусто */);
}


FindUnused {
  t.ErrorList e.AST
    = <FindUnused-Loop
        t.ErrorList
        <MapAccum r05-parser_FindUnused-InitialUsage () e.AST>
      >;
}

$ENTRY r05-parser_FindUnused-InitialUsage {
  (e.Entries) (Function t.Pos (e.Name) Entry e.Body)
    = (e.Entries (Call e.Name))
      (Function Unused t.Pos (e.Name) Entry e.Body);

  (e.Entries) (Function t.Pos (e.Name) s.Scope e.Body)
    = (e.Entries) (Function Unused t.Pos (e.Name) s.Scope e.Body);

  (e.Entries) (SpecialComment t.Pos e.Comment)
    = (e.Entries) (SpecialComment t.Pos e.Comment);
}

FindUnused-Loop {
  t.ErrorList ((s.How e.Name) e.References)
  e.AST-B (Function Unused t.Pos (e.Name) Extern /* пусто */) e.AST-E
    = <FindUnused-Loop
        t.ErrorList (e.References)
        e.AST-B (Function Used t.Pos (e.Name) Extern /* пусто */) e.AST-E
      >;

  t.ErrorList ((Call e.Name) e.References)
  e.AST-B (Function Unused t.Pos (e.Name) s.Scope e.Body) e.AST-E
    = <FindUnused-Loop
        t.ErrorList
        (e.References <ExtractReferences e.Body>)
        e.AST-B (Function Used t.Pos (e.Name) s.Scope e.Body) e.AST-E
      >;

  t.ErrorList ((s.How e.Name) e.References)
  e.AST-B (Function s.Used t.Pos (e.Name) s.Scope e.Body) e.AST-E
    = <FindUnused-Loop
        t.ErrorList (e.References)
        e.AST-B (Function s.Used t.Pos (e.Name) s.Scope e.Body) e.AST-E
      >;

  t.ErrorList ((s.How e.BuiltinName) e.References) e.AST
    , <ListOfBuiltin-WithSugar> : e.1 (s.No s.FuncName regular) e.2
    , <Explode s.FuncName> : e.BuiltinName
    = <FindUnused-Loop
        t.ErrorList (e.References)
        e.AST (Function Used NO-POS (e.BuiltinName) Extern /* пусто */)
      >;

  t.ErrorList ((Call e.BuiltinName) e.References) e.AST
    , <ListOfBuiltin-WithSugar> : e.1 (s.No s.FuncName special) e.2
    , <Explode s.FuncName> : e.BuiltinName
    = <FindUnused-Loop
        t.ErrorList <AddMetatable (e.References) e.AST>
      >;

  t.ErrorList ((s.How e.Name) e.References) e.AST
    = <FindUnused-Loop
        t.ErrorList (e.References)
        e.AST (Function Used NO-POS (e.Name) Local /* пусто */)
      >;

   t.ErrorList (/* кончились ссылки */) e.AST
     = <MapAccum r05-parser_FindUnused-Loop-UnusedErrors t.ErrorList e.AST>;
}

ListOfBuiltin-WithSugar {
  = <ListOfBuiltin>
    (0 "%" regular)
    (0 "*" regular)
    (0 "+" regular)
    (0 "-" regular)
    (0 "/" regular)
    (0 "?" special)
}

AddMetatable {
  (e.References) e.AST
    = <AddMetatable-Aux
        (e.References)
        <MapAccum
          r05-parser_AddMetatable-AddFunction (/* пусто */)
          e.AST
          <Map r05-parser_AddMetatable-MakeMetafunction <ListOfBuiltin-WithSugar>>
        >
      >;
}

$ENTRY r05-parser_AddMetatable-AddFunction {
  (e.AllFunctions) (Function s.Used NO-POS (e.Builtin) Extern /* пусто */)
    = (e.AllFunctions)
      (Function s.Used NO-POS (e.Builtin) Extern /* пусто */);

  (e.AllFunctions) (Function s.Used t.Pos (e.Name) Extern /* пусто */)
    = (e.AllFunctions (e.Name))
      (Function s.Used t.Pos (e.Name) Extern /* пусто */);

  (e.AllFunctions) (Function Used NO-POS (e.Ident) Local /* пусто */)
    = (e.AllFunctions) (Function Used NO-POS (e.Ident) Local /* пусто */);

  (e.AllFunctions) (Function s.Used t.Pos (e.Name) s.Scope e.Body)
    = (e.AllFunctions (e.Name))
      (Function s.Used t.Pos (e.Name) s.Scope e.Body);

  (e.AllFunctions) (SpecialComment t.Pos e.Comment)
    = (e.AllFunctions) (SpecialComment t.Pos e.Comment);
}

$ENTRY r05-parser_AddMetatable-MakeMetafunction {
  (s.No s.Name special)
    = (Function Used NO-POS (<Explode s.Name>) Meta /* пусто */);

  t.Regular = /* пусто */;
}

AddMetatable-Aux {
  (e.References) (e.AllFunctions) e.AST
    = (e.References <Map r05-parser_AddHowCall e.AllFunctions>)
      e.AST (Metatable e.AllFunctions);
}

$ENTRY r05-parser_AddHowCall {
  (e.Name) = (Call e.Name);
}

$ENTRY r05-parser_FindUnused-Loop-UnusedErrors {
  t.ErrorList (Function Unused t.Pos (e.Name) s.Scope e.Body)
    = <EL-AddErrorAt t.ErrorList t.Pos <UnusedMessage s.Scope> ' ' e.Name>;

  t.ErrorList t.Other = t.ErrorList t.Other;
}

UnusedMessage {
  Local = 'Unused local function';
  Extern = 'Unused external declaration';
}


CastAST {
  e.AST = <CastAST-JoinExterns <Map r05-parser_CastAST-Item e.AST>>;
}

$ENTRY r05-parser_CastAST-Item {
  (Function Used t.Pos (e.Name) Extern /* пусто */) = (Extern (t.Pos e.Name));

  (Function Used t.Pos (e.Name) s.Scope e.Body)
    = (Function t.Pos (e.Name) s.Scope e.Body);

  (SpecialComment t.Pos e.Comment) = (SpecialComment t.Pos e.Comment);

  (Metatable e.Functions) = (Metatable e.Functions);
}

CastAST-JoinExterns {
  e.AST-B (Extern e.Externs1) (Extern e.Externs2) e.AST-E
    = e.AST-B <CastAST-JoinExterns (Extern e.Externs1 e.Externs2) e.AST-E>;

  e.AST = e.AST;
}


/*
  <ExtractReferences e.Sentences> == (e.Name)*
*/
ExtractReferences {
  e.Sentences = <Unique <Map r05-parser_ExtractReferences-Sentence e.Sentences>>;
}

$ENTRY r05-parser_ExtractReferences-Sentence {
  ((e.Pattern) e.Tail)
    = <ExtractReferences-Expr e.Pattern> <ExtractReferences-Tail e.Tail>;
}

ExtractReferences-Tail {
  (Condition (e.Result) (e.Pattern)) e.Tail
    = <ExtractReferences-Expr e.Result> <ExtractReferences-Expr e.Pattern>
      <ExtractReferences-Tail e.Tail>;

  RETURN (e.Result) = <ExtractReferences-Expr e.Result>;

  CALL-BLOCK (e.Result) e.Sentences
    = <ExtractReferences-Expr e.Result>
      <ExtractReferences e.Sentences>;
}

ExtractReferences-Expr {
  e.Expr = <Map r05-parser_ExtractReferences-Term e.Expr>;
}

$ENTRY r05-parser_ExtractReferences-Term {
  (Symbol Word e.Name) = (Ident e.Name);

  (Brackets e.Expr) = <ExtractReferences-Expr e.Expr>;

  (Call t.SrcPos (e.Name) e.Expr)
    = (Call e.Name) <ExtractReferences-Expr e.Expr>;

  t.Other = /* пусто */;
}

/**
  <R05-Parse-File e.SourceFile>
    == Success e.Tree
    == Fails e.Errors

  e.Errors ::= ((s.Row s.Col) e.Message)*
*/
$ENTRY R05-Parse-File {
  e.SourceFile
    , <Parse <Scan e.SourceFile>>
    : {
        Success e.AST
          , <R05-PrepareAST e.AST>
          : {
            Success e.PreparedAST = Success e.PreparedAST;

            Fails e.SemanticErrors = Fails <SortErrors e.SemanticErrors>;
          };

        Fails e.ParserErrors = Fails <SortErrors e.ParserErrors>;
      };
}

SortErrors {
  e.Errors = <DoSortErrors (/* sorted */) e.Errors>;
}

DoSortErrors {
  (e.Sorted) /* unsorted */ = e.Sorted;

  (e.Sorted) t.Next e.Unsorted =
    <DoSortErrors
      (<SortErrors-Insert e.Sorted t.Next>)
      e.Unsorted
    >;
}

SortErrors-Insert {
  /* пусто */ t.Next = t.Next;

  e.Sorted t.Great t.Next =
    <SortErrors-Insert-Compare
      e.Sorted t.Great t.Next <CompareError t.Great t.Next>
    >;
}

SortErrors-Insert-Compare {
  e.Sorted t.Great t.Next '+' = <SortErrors-Insert e.Sorted t.Next> t.Great;
  e.Sorted t.Great t.Next s.Other = e.Sorted t.Great t.Next;
}

CompareError {
  ((s.Row s.Col1 e.File1) e.Message1) ((s.Row s.Col2 e.File2) e.Message2) =
    <Compare s.Col1 s.Col2>;

  ((s.Row1 s.Col1 e.File1) e.Message1) ((s.Row2 s.Col2 e.File2) e.Message2) =
    <Compare s.Row1 s.Row2>;
}


EL-Create {
  e.Errors = (ErrorList e.Errors);
}

EL-AddErrorAt {
  (ErrorList e.Errors) t.SrcPos e.Message =
    (ErrorList e.Errors (t.SrcPos e.Message));
}

EL-Destroy {
  (ErrorList e.Errors) = e.Errors;
}
