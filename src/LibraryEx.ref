*===============================================================================
* Расширения библиотеки и функции, реализуемые средствами самого Рефала-05
*===============================================================================


/**
  <Apply t.Closure e.Arg> == e.Res

  t.Closure ::=
      s.WORD
    | (t.Closure e.Bounded)
  e.Arg, e.Res, e.Bounded ::= e.AnyExpr
*/
$ENTRY Apply {
  s.Fn e.Argument = <Mu s.Fn e.Argument>;

  (t.Closure e.Bounded) e.Argument
    = <Apply t.Closure e.Bounded e.Argument>;
}


/**
  <Map t.Closure t.Item*> == e.ItemRes*

  <Apply t.Closure t.Item> == e.ItemRes
*/
$ENTRY Map {
  t.Fn t.Next e.Tail = <Apply t.Fn t.Next> <Map t.Fn e.Tail>;

  t.Fn = ;
}


/**
  <Reduce t.Closure t.Accum t.Item*> == t.Accum′

  <Apply t.Closure t.Accum t.Item> == t.Accum′
  t.Accum′ ::= t.Accum
*/
$ENTRY Reduce {
  t.Fn t.Acc t.Next e.Tail
    = <Reduce
        t.Fn <Apply t.Fn t.Acc t.Next> e.Tail
      >;

  t.Fn t.Acc = t.Acc;
}


/**
  <MapAccum t.Closure t.Accum t.Item*> == t.Accum′ e.ItemRes*

  <Apply t.Closure t.Accum t.Item> == t.Accum′ e.ItemRes
  t.Accum′ ::= t.Accum
*/
$ENTRY MapAccum {
  t.Fn t.Acc e.Tail = <DoMapAccum t.Fn t.Acc () e.Tail>;
}

DoMapAccum {
  t.Fn t.Acc (e.Scanned) t.Next e.Tail
    = <DoMapAccum
        t.Fn
        <MapAccum-AddScanned
          <Apply t.Fn t.Acc t.Next> (e.Scanned)
        >
        e.Tail
      >;

  t.Fn t.Acc (e.Scanned) = t.Acc e.Scanned;
}

MapAccum-AddScanned {
  t.Acc e.StepScanned (e.Scanned) =
    t.Acc (e.Scanned e.StepScanned);
}


/**
  <DelAccumulator t.Accum e.AnyExpr> == e.AnyExpr
*/
$ENTRY DelAccumulator {
  t.Acc e.Tail = e.Tail;
}

LOAD-SAVE-HANDLE { = 39; }


/**
  <LoadFile e.FileName> == e.Lines

  e.Lines ::= (e.Line)*
  e.Line ::= s.CHAR*
*/
$ENTRY LoadFile {
  e.FileName =
    <Open 'r' <LOAD-SAVE-HANDLE> e.FileName>
    <DoLoadFile <Get <LOAD-SAVE-HANDLE>>>
    <Close <LOAD-SAVE-HANDLE>>;
}

DoLoadFile {
  /* пусто */ 0 = /* конец файла, пропускаем тут пустую строку */;

  e.Line 0 = (e.Line) /* конец файла */;

  e.Line = (e.Line) <DoLoadFile <Get <LOAD-SAVE-HANDLE>>>;
}


/**
  <SaveFile (e.FileName) e.Lines> == empty
*/
$ENTRY SaveFile {
  (e.FileName) e.Lines =
    <Open 'w' <LOAD-SAVE-HANDLE> e.FileName>
    <Map SaveFile-WriteBracketLine e.Lines>
    <Close <LOAD-SAVE-HANDLE>>;
}

SaveFile-WriteBracketLine {
  (e.Line) = <Putout <LOAD-SAVE-HANDLE> e.Line>;
}


/**
  <Inc e.LongNumber> == e.LongNumber
  <Dec e.LongNumber> == e.LongNumber
*/
$ENTRY Inc {
* Совместимость и с Рефалом-05
  e.Num = <Add 1 e.Num>;
}

$ENTRY Dec {
* Совместимость и с Рефалом-05
  s.Num = <Sub s.Num 1>;
  e.Num = <Sub (e.Num) 1>;
}


/**
  <ArgList> == (e.Arg)+
  e.Arg ::= s.CHAR*
*/
$ENTRY ArgList {
  = <DoArgList 0>;
}

DoArgList {
  s.Next = <SwDoArgList <Inc s.Next> <Arg s.Next>>;
}

SwDoArgList {
  s.Next = ;

  s.Next e.Arg = (e.Arg) <DoArgList s.Next>;
}


/**
  <Trim s.CHAR*> == s.CHAR*
  <Trim-L s.CHAR*> == s.CHAR*
  <Trim-R s.CHAR*> == s.CHAR*
*/
$ENTRY Trim {
  e.Line = <Trim-L <Trim-R e.Line>>;
}


$ENTRY Trim-L {
  ' ' e.Line = <Trim-L e.Line>;
  '\t' e.Line = <Trim-L e.Line>;
  '\r' e.Line = <Trim-L e.Line>;
  '\n' e.Line = <Trim-L e.Line>;
  e.Line = e.Line;
}


$ENTRY Trim-R {
  e.Line ' ' = <Trim-R e.Line>;
  e.Line '\t' = <Trim-R e.Line>;
  e.Line '\r' = <Trim-R e.Line>;
  e.Line '\n' = <Trim-R e.Line>;
  e.Line = e.Line;
}


/**
  <OneOf t.Elem e.SampleElems> == True | False
*/
$ENTRY OneOf {
  t.Sample e.Items-B t.Sample e.Items-E = True;
  t.Sample e.Items = False;
}


/**
  <Unique t.Item*> == t.Item*
*/
$ENTRY Unique {
  e.Uniques t.Repeated e.Items-B t.Repeated e.Items-E
    = e.Uniques <Unique e.Items-B t.Repeated e.Items-E>;

  e.Uniques = e.Uniques;
}


/**
  <TryLoadExpr e.FileName>
    == Success e.ANY | Fails e.Error

  e.Error ::= (s.Line s.Col) e.Message
  s.Line, s.Col ::= s.NUMBER
  e.Message ::= s.CHAR*
*/
$ENTRY TryLoadExpr {
  e.FileName
    = <TryLoadExpr-Parse
        ('$' /* scanned */) <TryLoadExpr-Prepare <LoadFile e.FileName>>
      >;
}

TryLoadExpr-Prepare {
  e.Lines = <DelAccumulator <MapAccum TryLoadExpr-PrepareLine 1 e.Lines>>;
}

TryLoadExpr-PrepareLine {
  s.LineNo ('*' e.Line) = <Inc s.LineNo>;

  s.LineNo (e.Line) = <Inc s.LineNo> (s.LineNo <Lenw e.Line>);
}

TryLoadExpr-Parse {
  (e.Scanned) (s.LineNo s.LineLen s.Letter e.Line) e.Lines
    , <Type s.Letter> : 'L' e.1
    = <TryLoadExpr-Parse-Ident
        (e.Scanned) (s.LineNo s.LineLen <Implode s.Letter e.Line>) e.Lines
      >;

  (e.Scanned) (s.LineNo s.LineLen s.Digit e.Line) e.Lines
    , <Type s.Digit> : 'D' e.1
    = <TryLoadExpr-Parse-Number
        (e.Scanned) (s.Digit) (s.LineNo s.LineLen <Type e.Line>) e.Lines
      >;

  (e.Scanned) (s.LineNo s.LineLen s.Quote e.Line) e.Lines
    , '\'\"' : e.1 s.Quote e.2
    = <TryLoadExpr-Parse-Quote
        (e.Scanned) (s.Quote) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (t.Stack e.Scanned) (s.LineNo s.LineLen '(' e.Line) e.Lines
    = <TryLoadExpr-Parse
        ((t.Stack e.Scanned (s.LineNo s.LineLen e.Line)))
        (s.LineNo s.LineLen e.Line) e.Lines
      >;

  ((t.Stack e.Scanned t.PosInfo) e.Bracketed)
  (s.LineNo s.LineLen ')' e.Line) e.Lines
    = <TryLoadExpr-Parse
        (t.Stack e.Scanned (e.Bracketed)) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  ('$' e.Scanned) (s.LineNo s.LineLen ')' e.Line) e.Lines
    = <TryLoadExpr-MakeError
        s.LineNo s.LineLen (e.Line) 'Unbalanced bracket \')\''
      >;

  (e.Scanned) (s.LineNo s.LineLen s.Char e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned <SkipSpace s.Char>) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.LineNo s.LineLen /* пусто */) e.Lines
    = <TryLoadExpr-Parse (e.Scanned) e.Lines>;

  ('$' e.Scanned) /* пусто */ = Success e.Scanned;

  ((t.Stack e.Scanned (s.LineNo s.LineLen e.Line)) e.Bracketed) /* пусто */
    = <TryLoadExpr-MakeError
        s.LineNo s.LineLen (e.Line) 'Unbalanced bracket \'(\''
      >;
}

TryLoadExpr-Parse-Ident {
  (e.Scanned) (s.LineNo s.LineLen s.Word e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned s.Word) (s.LineNo s.LineLen e.Line) e.Lines
      >;
}

TryLoadExpr-Parse-Number {
  (e.Scanned) (e.Number) (s.LineNo s.LineLen 'D' s.1 s.Digit e.Line) e.Lines
    = <TryLoadExpr-Parse-Number
        (e.Scanned) (e.Number s.Digit) (s.LineNo s.LineLen <Type e.Line>) e.Lines
      >;

  (e.Scanned) (e.Number) (s.LineNo s.LineLen s.1 s.2 e.Line) e.Lines
    , <Numb e.Number>
    : {
        s.OneNumber
          = <TryLoadExpr-Parse
              (e.Scanned s.OneNumber) (s.LineNo s.LineLen e.Line) e.Lines
            >;

        e.SomeNumbers
          = <TryLoadExpr-MakeError
              s.LineNo s.LineLen (e.Line)
              'Very long number literal ' e.Number
            >;
      }
}

TryLoadExpr-MakeError {
  s.LineNo s.LineLen (e.Rest) e.Message
    , <Lenw e.Rest> : s.RestLen e.1
    = Fails (s.LineNo <Inc <- s.LineLen s.RestLen>>) e.Message;
}

TryLoadExpr-Parse-Quote {
  (e.Scanned) ('\'' e.Text) (s.LineNo s.LineLen '\'' e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned e.Text) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) ('"' e.Text) (s.LineNo s.LineLen '"' e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned <Implode_Ext e.Text>) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen '\\x' e.Line) e.Lines
    = <TryLoadExpr-Parse-Hex
        (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Quote e.Text)
  (s.LineNo s.LineLen '\\' s.Escaped e.Line) e.Lines
    , ('\'\'') ('\"\"') ('\\\\') ('n\n') ('r\r') ('t\t')
      ('<<') ('>>') ('((') ('))')
    : {
        e.Escapes-B (s.Escaped s.Char) e.Escapes-E
          = <TryLoadExpr-Parse-Quote
              (e.Scanned) (s.Quote e.Text s.Char)
              (s.LineNo s.LineLen e.Line) e.Lines
            >;

        e.Escapes
          = <TryLoadExpr-MakeError
              s.LineNo s.LineLen (e.Line)
              'Bad escape sequence \\' s.Escaped
            >;
      };

  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen s.Char e.Line) e.Lines
    = <TryLoadExpr-Parse-Quote
        (e.Scanned) (s.Quote e.Text s.Char) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen /* пусто */) e.Lines
    = <TryLoadExpr-MakeError s.LineNo s.LineLen () 'Unclosed quote ' s.Quote>;
}

SkipSpace {
  ' ' = /* пропускаем */;
  '\t' = /* пропускаем */;
  s.Char = s.Char;
}

TryLoadExpr-Parse-Hex {
  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen s.H1 s.H2 e.Line) e.Lines
    , <Hex s.H1> : s.Val1
    , <Hex s.H2> : s.Val2
    = <TryLoadExpr-Parse-Quote
        (e.Scanned)
        (s.Quote e.Text <Chr <+ <* s.Val1 16> s.Val2>>)
        (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Qoute e.Text) (s.LineNo s.LineLen e.Line) e.Lines
    = <TryLoadExpr-MakeError
        s.LineNo s.LineLen (e.Line)
        'Bad hex escape sequence \\x' <First2 e.Line>
      >;
}

Hex {
  s.Digit, <Type s.Digit> : 'D' e.1 = <Numb s.Digit>;

  s.Hex
    , <Upper s.Hex> : s.UHex
    , ('A' 10) ('B' 11) ('C' 12) ('D' 13) ('E' 14) ('F' 15)
    : e.Hex-B (s.UHex s.Value) e.Hex-E
    = s.Value;

  s.Other = /* пусто */;
}

First2 {
  s.1 s.2 e.Line = s.1 s.2;
  e.Line = e.Line;
}


/**
  <LoadExpr e.FileName> == e.Expr
*/
$ENTRY LoadExpr {
  e.FileName
    , <TryLoadExpr e.FileName>
    : {
        Success e.Expr = e.Expr;

        Fails (s.Line s.Col) e.Message
          = <Putout
              0 e.FileName ':' <Symb s.Line> ':' <Symb s.Col> ':' e.Message
            >
            <Exit 1>;
      };
}
